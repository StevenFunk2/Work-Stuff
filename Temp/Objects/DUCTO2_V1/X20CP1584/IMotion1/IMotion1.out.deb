SECTIONS,12|INFO|7|103|GOT_COUNT,71GOT_DATA,3LOADERSTART,144EXIT_INIT,6679EXIT_CYCLIC,6645EXIT_EXIT,6719NO_DEBUG_INFO,0|GOT|71|2454|,CODE(0x0),0,CODE(0x0),0,CODE(0x0),0BrakeEncoder,PV(-1),3,(Cyclic.st)TopDAC2,PV(-1),8,(Cyclic.st)BrakePercentSpeed,PV(-1),3,(Cyclic.st)ActlMetalEncoder,PV(-1),3,(Cyclic.st)MaxDAC,PV(-1),8,(Cyclic.st)BrakeCarriageTarget,PV(-1),12,(Cyclic.st)DACAdd1,PV(-1),12,(Cyclic.st)UnitsPerInch1,PV(-1),12,(Cyclic.st)DACBalance2,PV(-1),8,(Cyclic.st)InPosition1,PV(-1),11,(Cyclic.st)DecelCounter2,PV(-1),8,(Cyclic.st)DACAdd2,PV(-1),12,(Cyclic.st)BrakeAuto,PV(-1),11,(Cyclic.st)Hold2,PV(-1),8,(Cyclic.st)SRM2,PV(-1),12,(Cyclic.st)Axis2Scaler,PV(-1),12,(Cyclic.st)CarriageReference,PV(-1),11,(Cyclic.st)TargetDAC2,PV(-1),8,(Cyclic.st)BrakeReference,PV(-1),12,(Cyclic.st)MaxDACSquared,PV(-1),8,(Cyclic.st)InPosition2,PV(-1),11,(Cyclic.st)BrakeResolution,PV(-1),12,(Cyclic.st)difference,PV(-1),3,(Cyclic.st)MetalTarget,PV(-1),3,(Cyclic.st)BackGaugeJogPercent,PV(-1),3,(Cyclic.st)AbsoluteDifference,PV(-1),3,(Cyclic.st)TopAxis2Speed,PV(-1),12,(Cyclic.st)ActualRunPercent2,PV(-1),12,(Cyclic.st)SettleTime2,PV(-1),8,(Cyclic.st)diBrakeCarriageJogOut,PV(-1),11,(Cyclic.st)BrakeDriveEnable,PV(-1),11,(Cyclic.st)BrakeHydraulics,PV(-1),11,(Cyclic.st)BrakeActual,PV(-1),12,(Cyclic.st)MetalScaler,PV(-1),12,(Cyclic.st)TargetCount2,PV(-1),8,(Cyclic.st)diBrakeCarriageJogIn,PV(-1),11,(Cyclic.st)RealDAC2,PV(-1),12,(Cyclic.st)MoveLength2,PV(-1),3,(Cyclic.st)__AS__ImplInitInit,CODE(0x1a1e),19,(Init.st)AccelRampReal2,PV(-1),12,(Cyclic.st)MotionStatus2,PV(-1),8,(Cyclic.st)BrakeDriveReady,PV(-1),11,(Cyclic.st)DecelRampReal2,PV(-1),12,(Cyclic.st)StopFlag2,PV(-1),11,(Cyclic.st)UpdateRate2,PV(-1),11,(Cyclic.st)BrakeDesired,PV(-1),12,(Cyclic.st)__AS__ImplInitDummyInit,CODE(0x1a28),19,(Init.st)Ratio2,PV(-1),8,(Cyclic.st)IncrementalRealTarget,PV(-1),12,(Cyclic.st)AverageSpeed2,PV(-1),12,(Cyclic.st)LastPosition2,PV(-1),3,(Cyclic.st)IBrakeReference,PV(-1),3,(Cyclic.st)AMoveLength2,PV(-1),3,(Cyclic.st)ActualSpeed2,PV(-1),12,(Cyclic.st)ActualDAC2,PV(-1),8,(Cyclic.st)StopWatch2,PV(-1),12,(Cyclic.st)MotionStatus1,PV(-1),8,(Cyclic.st)Counter2,PV(-1),8,(Cyclic.st)IMotion2Target,PV(-1),3,(Cyclic.st)DecelTime2,PV(-1),12,(Cyclic.st)ElectricWrapBrake,PV(-1),11,(Cyclic.st)EjectComplete,PV(-1),11,(Cyclic.st)FirstTarget2,PV(-1),11,(Cyclic.st)DecelDistance2,PV(-1),3,(Cyclic.st)BrakeTolerance,PV(-1),8,(Cyclic.st)_GLOBAL_OFFSET_TABLE_,PCREL(0x1a3b),0_GLOBAL_OFFSET_TABLE_,PCREL(0x1a0b),0_GLOBAL_OFFSET_TABLE_,PCREL(0x13),0|FILES|3|173|C:/Code/BandR Duct Line Project/Logical/IMotion1/Cyclic.stC:/Code/BandR Duct Line Project/Logical/IMotion1/Init.stC:/Code/BandR Duct Line Project/Logical/IMotion1/Exit.st|LINE|183|1905|C:/Code/BandR Duct Line Project/Logical/IMotion1/Cyclic.st|1|20|__AS__CyclicProgram3,23,04,42,05,74,06,91,07,102,010,113,011,130,013,140,014,157,016,167,017,184,018,198,019,209,020,220,023,248,024,282,025,301,027,320,028,351,031,362,032,381,034,400,035,431,040,442,041,485,044,512,045,538,046,555,047,589,048,620,049,655,054,666,055,711,057,743,059,757,060,785,062,822,063,836,064,871,066,894,070,912,071,943,073,961,074,996,076,1014,077,1056,081,1086,082,1113,083,1140,084,1263,085,1386,086,1419,087,1462,088,1495,089,1616,090,1644,092,1786,093,1814,094,1852,095,1975,096,2034,097,2077,098,2104,099,2147,0100,2173,0101,2305,0102,2336,0105,2350,0106,2360,0107,2370,0108,2381,0109,2512,0110,2539,0112,2558,0115,2577,0118,2596,0119,2625,0120,2658,0121,2799,0122,2834,0125,2857,0126,2871,0127,2887,0128,2898,0129,2908,0131,2927,0133,2956,0134,2988,0135,3016,0136,3030,0137,3063,0138,3081,0139,3095,0140,3123,0142,3139,0146,3155,0147,3282,0148,3322,0150,3345,0152,3450,0156,3469,0157,3496,0160,3521,0161,3555,0162,3566,0163,3597,0164,3632,0165,3646,0166,3657,0167,3668,0170,3701,0172,3717,0173,3746,0174,3779,0175,3822,0176,3941,0177,4064,0178,4074,0179,4093,0180,4122,0181,4155,0182,4198,0183,4317,0184,4440,0185,4450,0186,4460,0187,4479,0188,4508,0189,4527,0191,4538,0192,4557,0193,4679,0195,4803,0196,4814,0197,4842,0198,4853,0201,4869,0202,4879,0203,4914,0205,5037,0208,5060,0209,5089,0210,5108,0212,5119,0213,5138,0214,5264,0216,5387,0217,5398,0218,5426,0219,5437,0222,5453,0223,5495,0225,5619,0228,5649,0229,5678,0230,5800,0232,5924,0233,5940,0234,5982,0236,5998,0237,6027,0238,6060,0239,6202,0240,6244,0243,6274,0244,6288,0245,6304,0246,6315,0247,6325,0249,6344,0250,6373,0251,6413,0252,6448,0253,6459,0256,6475,0257,6486,0258,6514,0261,6525,0262,6560,0264,6578,0265,6620,0268,6645,0|TYPE|49|1466|C:/Code/BandR Duct Line Project/Logical/IMotion1/Cyclic.st|0|int:t(0,1)=r(0,1);0020000000000;0017777777777;char:t(0,2)=r(0,2);0;127;long int:t(0,3)=r(0,1);0020000000000;0017777777777;unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;short int:t(0,8)=r(0,8);-32768;32767;short unsigned int:t(0,9)=r(0,9);0;65535;signed char:t(0,10)=r(0,10);-128;127;unsigned char:t(0,11)=r(0,11);0;255;float:t(0,12)=r(0,1);4;0;double:t(0,13)=r(0,1);8;0;long double:t(0,14)=r(0,1);12;0;complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;complex float:t(0,16)=r(0,16);4;0;complex double:t(0,17)=r(0,17);8;0;complex long double:t(0,18)=r(0,18);12;0;void:t(0,19)=(0,19)plcbit:t(0,20)=(0,11)plcbyte:t(0,21)=(0,11)plcword:t(0,22)=(0,9)plcdword:t(0,23)=(0,5)plctime:t(0,24)=(0,3)plctod:t(0,25)=(0,5)plcdate:t(0,26)=(0,5)plcdt:t(0,27)=(0,5)plcstring:t(0,28)=(0,2)plcwstring:t(0,29)=(0,9)BOOL:t(0,30)=(0,20)BYTE:t(0,31)=(0,21)WORD:t(0,32)=(0,22)DWORD:t(0,33)=(0,23)SINT:t(0,34)=(0,10)INT:t(0,35)=(0,8)DINT:t(0,36)=(0,3)USINT:t(0,37)=(0,11)UINT:t(0,38)=(0,9)UDINT:t(0,39)=(0,5)REAL:t(0,40)=(0,12)LREAL:t(0,41)=(0,13)TIME:t(0,42)=(0,24)TOD:t(0,43)=(0,25)TIME_OF_DAY:t(0,44)=(0,25)DATE:t(0,45)=(0,26)DT:t(0,46)=(0,27)DATE_AND_TIME:t(0,47)=(0,27)STRING:t(0,48)=(0,28)WSTRING:t(0,49)=(0,29)|FUNC|0|0|C:/Code/BandR Duct Line Project/Logical/IMotion1/Cyclic.st|__AS__CyclicProgram||LINE|2|27|C:/Code/BandR Duct Line Project/Logical/IMotion1/Init.st|1|18|__AS__InitProgram6,6679,0|TYPE|49|1466|C:/Code/BandR Duct Line Project/Logical/IMotion1/Init.st|0|int:t(0,1)=r(0,1);0020000000000;0017777777777;char:t(0,2)=r(0,2);0;127;long int:t(0,3)=r(0,1);0020000000000;0017777777777;unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;short int:t(0,8)=r(0,8);-32768;32767;short unsigned int:t(0,9)=r(0,9);0;65535;signed char:t(0,10)=r(0,10);-128;127;unsigned char:t(0,11)=r(0,11);0;255;float:t(0,12)=r(0,1);4;0;double:t(0,13)=r(0,1);8;0;long double:t(0,14)=r(0,1);12;0;complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;complex float:t(0,16)=r(0,16);4;0;complex double:t(0,17)=r(0,17);8;0;complex long double:t(0,18)=r(0,18);12;0;void:t(0,19)=(0,19)plcbit:t(0,20)=(0,11)plcbyte:t(0,21)=(0,11)plcword:t(0,22)=(0,9)plcdword:t(0,23)=(0,5)plctime:t(0,24)=(0,3)plctod:t(0,25)=(0,5)plcdate:t(0,26)=(0,5)plcdt:t(0,27)=(0,5)plcstring:t(0,28)=(0,2)plcwstring:t(0,29)=(0,9)BOOL:t(0,30)=(0,20)BYTE:t(0,31)=(0,21)WORD:t(0,32)=(0,22)DWORD:t(0,33)=(0,23)SINT:t(0,34)=(0,10)INT:t(0,35)=(0,8)DINT:t(0,36)=(0,3)USINT:t(0,37)=(0,11)UINT:t(0,38)=(0,9)UDINT:t(0,39)=(0,5)REAL:t(0,40)=(0,12)LREAL:t(0,41)=(0,13)TIME:t(0,42)=(0,24)TOD:t(0,43)=(0,25)TIME_OF_DAY:t(0,44)=(0,25)DATE:t(0,45)=(0,26)DT:t(0,46)=(0,27)DATE_AND_TIME:t(0,47)=(0,27)STRING:t(0,48)=(0,28)WSTRING:t(0,49)=(0,29)|FUNC|0|0|C:/Code/BandR Duct Line Project/Logical/IMotion1/Init.st|__AS__InitProgram||LINE|2|27|C:/Code/BandR Duct Line Project/Logical/IMotion1/Exit.st|1|18|__AS__ExitProgram6,6719,0|TYPE|49|1466|C:/Code/BandR Duct Line Project/Logical/IMotion1/Exit.st|0|int:t(0,1)=r(0,1);0020000000000;0017777777777;char:t(0,2)=r(0,2);0;127;long int:t(0,3)=r(0,1);0020000000000;0017777777777;unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;short int:t(0,8)=r(0,8);-32768;32767;short unsigned int:t(0,9)=r(0,9);0;65535;signed char:t(0,10)=r(0,10);-128;127;unsigned char:t(0,11)=r(0,11);0;255;float:t(0,12)=r(0,1);4;0;double:t(0,13)=r(0,1);8;0;long double:t(0,14)=r(0,1);12;0;complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;complex float:t(0,16)=r(0,16);4;0;complex double:t(0,17)=r(0,17);8;0;complex long double:t(0,18)=r(0,18);12;0;void:t(0,19)=(0,19)plcbit:t(0,20)=(0,11)plcbyte:t(0,21)=(0,11)plcword:t(0,22)=(0,9)plcdword:t(0,23)=(0,5)plctime:t(0,24)=(0,3)plctod:t(0,25)=(0,5)plcdate:t(0,26)=(0,5)plcdt:t(0,27)=(0,5)plcstring:t(0,28)=(0,2)plcwstring:t(0,29)=(0,9)BOOL:t(0,30)=(0,20)BYTE:t(0,31)=(0,21)WORD:t(0,32)=(0,22)DWORD:t(0,33)=(0,23)SINT:t(0,34)=(0,10)INT:t(0,35)=(0,8)DINT:t(0,36)=(0,3)USINT:t(0,37)=(0,11)UINT:t(0,38)=(0,9)UDINT:t(0,39)=(0,5)REAL:t(0,40)=(0,12)LREAL:t(0,41)=(0,13)TIME:t(0,42)=(0,24)TOD:t(0,43)=(0,25)TIME_OF_DAY:t(0,44)=(0,25)DATE:t(0,45)=(0,26)DT:t(0,46)=(0,27)DATE_AND_TIME:t(0,47)=(0,27)STRING:t(0,48)=(0,28)WSTRING:t(0,49)=(0,29)|FUNC|0|0|C:/Code/BandR Duct Line Project/Logical/IMotion1/Exit.st|__AS__ExitProgram|