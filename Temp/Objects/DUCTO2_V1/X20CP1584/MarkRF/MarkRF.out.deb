SECTIONS,12|INFO|7|104|GOT_COUNT,149GOT_DATA,3LOADERSTART,144EXIT_INIT,4264EXIT_CYCLIC,4132EXIT_EXIT,4303NO_DEBUG_INFO,0|GOT|149|5217|,CODE(0x0),0,CODE(0x0),0,CODE(0x0),0r_trig,AVT + Name(-1),0TON,AVT + Name(-1),0f_trig,AVT + Name(-1),0TP,AVT + Name(-1),0zzTON00000000,PV(-1),78,(Cyclic.ld)SignalTimeUp,PV(-1),11,(Cyclic.ld)MarkActual,PV(-1),12,(Cyclic.ld)ScaledTarget,PV(-1),3,(Cyclic.ld)zzBOOL00010011,PV(-1),11,(Cyclic.ld)zz000300010003,PV(-1),8,(Cyclic.ld)zzBOOL00010021,PV(-1),11,(Cyclic.ld)zzRTR00001000C,PV(-1),72,(Cyclic.ld)StepBWorking,PV(-1),11,(Cyclic.ld)TON_0,PV(-1),50,(Cyclic.ld)zzFTR000010004,PV(-1),59,(Cyclic.ld)zzBOOL00010024,PV(-1),11,(Cyclic.ld)SetStepB,PV(-1),11,(Cyclic.ld)Homed,PV(-1),11,(Cyclic.ld)zz000400010000,PV(-1),3,(Cyclic.ld)MarkRFBase,PV(-1),3,(Cyclic.ld)zzBOOL00010014,PV(-1),11,(Cyclic.ld)zzBOOL00010001,PV(-1),11,(Cyclic.ld)zzBOOL0001001F,PV(-1),11,(Cyclic.ld)MarkSetSignal,PV(-1),11,(Cyclic.ld)CheckPosition,PV(-1),11,(Cyclic.ld)zzBOOL0001000C,PV(-1),11,(Cyclic.ld)zz000400010005,PV(-1),3,(Cyclic.ld)zzRTR00001000A,PV(-1),70,(Cyclic.ld)zzBOOL0001001D,PV(-1),11,(Cyclic.ld)zz000300010008,PV(-1),8,(Cyclic.ld)zzBOOL0001001A,PV(-1),11,(Cyclic.ld)zzBOOL0001000E,PV(-1),11,(Cyclic.ld)zzRTR00001000E,PV(-1),74,(Cyclic.ld)MarkSlowBand,PV(-1),3,(Cyclic.ld)MarkEncoder,PV(-1),3,(Cyclic.ld)zzBOOL00010016,PV(-1),11,(Cyclic.ld)MarkSignaling,PV(-1),11,(Cyclic.ld)zzFTR000010001,PV(-1),56,(Cyclic.ld)MarkSetButton,PV(-1),11,(Cyclic.ld)zzBOOL0001000F,PV(-1),11,(Cyclic.ld)zzBOOL00010002,PV(-1),11,(Cyclic.ld)TP_0,PV(-1),53,(Cyclic.ld)zz000400010002,PV(-1),3,(Cyclic.ld)zz000480010000,PV(-1),3,(Init.ld)AbsDiff,PV(-1),3,(Cyclic.ld)zzRTR000010000,PV(-1),60,(Cyclic.ld)zzRTR000010002,PV(-1),62,(Cyclic.ld)zzBOOL80010000,PV(-1),11,(Init.ld)zzRTR000010010,PV(-1),76,(Cyclic.ld)MarkRFHighSpeed,PV(-1),11,(Cyclic.ld)zzBOOL00010017,PV(-1),11,(Cyclic.ld)BeginMarkHoming,PV(-1),11,(Cyclic.ld)MarkAuto,PV(-1),11,(Cyclic.ld)NotInSlowBand,PV(-1),11,(Cyclic.ld)RawMarkEncoder,PV(-1),3,(Cyclic.ld)MarkHeadJogInSwitch,PV(-1),11,(Cyclic.ld)MarkHeadJogOutSwitch,PV(-1),11,(Cyclic.ld)zzBOOL00010012,PV(-1),11,(Cyclic.ld)TP_1,PV(-1),54,(Cyclic.ld)MarkHiSpeedSignal,PV(-1),11,(Cyclic.ld)TON_1,PV(-1),51,(Cyclic.ld)MarkButtonSignal,PV(-1),11,(Cyclic.ld)ScalerRef,PV(-1),12,(Cyclic.ld)zzBOOL00010020,PV(-1),11,(Cyclic.ld)zzRTR00001000B,PV(-1),71,(Cyclic.ld)zzBOOL00010004,PV(-1),11,(Cyclic.ld)InPosition,PV(-1),11,(Cyclic.ld)TargetOk,PV(-1),11,(Cyclic.ld)TargetTooSmall,PV(-1),11,(Cyclic.ld)zzBOOL00010008,PV(-1),11,(Cyclic.ld)zzFTR000010000,PV(-1),55,(Cyclic.ld)zzBOOL00010013,PV(-1),11,(Cyclic.ld)GoodToGo,PV(-1),11,(Cyclic.ld)zzBOOL0001001E,PV(-1),11,(Cyclic.ld)zzBOOL00010007,PV(-1),11,(Cyclic.ld)zzRTR000010005,PV(-1),65,(Cyclic.ld)zz000300010002,PV(-1),8,(Cyclic.ld)zz000300010000,PV(-1),8,(Cyclic.ld)zzBOOL0001000A,PV(-1),11,(Cyclic.ld)TON_2,PV(-1),52,(Cyclic.ld)zz000300010007,PV(-1),8,(Cyclic.ld)MarkSettingUp,PV(-1),11,(Cyclic.ld)ReturnTarget,PV(-1),3,(Cyclic.ld)zzBOOL0001000D,PV(-1),11,(Cyclic.ld)zz000800010000,PV(-1),12,(Cyclic.ld)zzRTR000010008,PV(-1),68,(Cyclic.ld)zz000300010005,PV(-1),8,(Cyclic.ld)TempStat,PV(-1),8,(Cyclic.ld)zzRTR000010006,PV(-1),66,(Cyclic.ld)zzRTR000010003,PV(-1),63,(Cyclic.ld)zzBOOL80010001,PV(-1),11,(Init.ld)zzBOOL00010022,PV(-1),11,(Cyclic.ld)MarkMinLength,PV(-1),12,(Cyclic.ld)zzBOOL00010010,PV(-1),11,(Cyclic.ld)Scaler,PV(-1),12,(Cyclic.ld)MarkTarget,PV(-1),12,(Cyclic.ld)zz000480010001,PV(-1),3,(Init.ld)zz000300010004,PV(-1),8,(Cyclic.ld)MarkRFMoveIn,PV(-1),11,(Cyclic.ld)__AS__ImplInitInit,CODE(0x10ae),19,(Init.ld)MarkReference,PV(-1),12,(Cyclic.ld)ResetMarkHoming,PV(-1),11,(Cyclic.ld)MarkEncoderResetSignal,PV(-1),3,(Cyclic.ld)zzFTR000010003,PV(-1),58,(Cyclic.ld)zz000400010001,PV(-1),3,(Cyclic.ld)MarkInPosBand,PV(-1),3,(Cyclic.ld)zz000400010006,PV(-1),3,(Cyclic.ld)SetStepA,PV(-1),11,(Cyclic.ld)RefInProcess,PV(-1),11,(Cyclic.ld)zzRTR00001000F,PV(-1),75,(Cyclic.ld)ResetMarkSet,PV(-1),11,(Cyclic.ld)MarkRefSwitch,PV(-1),11,(Cyclic.ld)__AS__ImplInitDummyInit,CODE(0x10b8),19,(Init.ld)zzBOOL00010005,PV(-1),11,(Cyclic.ld)zzBOOL00010019,PV(-1),11,(Cyclic.ld)MarkDesired,PV(-1),12,(Cyclic.ld)zzBOOL00010000,PV(-1),11,(Cyclic.ld)MarkResolution,PV(-1),12,(Cyclic.ld)zzBOOL0001001B,PV(-1),11,(Cyclic.ld)zzBOOL0001000B,PV(-1),11,(Cyclic.ld)zzBOOL00010009,PV(-1),11,(Cyclic.ld)zz000400010004,PV(-1),3,(Cyclic.ld)MarkStatus,PV(-1),3,(Cyclic.ld)zzBOOL0001001C,PV(-1),11,(Cyclic.ld)RTGTME,PV(-1),11,(Cyclic.ld)zzBOOL00010003,PV(-1),11,(Cyclic.ld)zz000400010003,PV(-1),3,(Cyclic.ld)zzRTR00001000D,PV(-1),73,(Cyclic.ld)zzBOOL00010006,PV(-1),11,(Cyclic.ld)zzBOOL00010015,PV(-1),11,(Cyclic.ld)zzRTR000010001,PV(-1),61,(Cyclic.ld)zzRTR000010004,PV(-1),64,(Cyclic.ld)StepAComplete,PV(-1),11,(Cyclic.ld)zz000300010001,PV(-1),8,(Cyclic.ld)zzFTR000010002,PV(-1),57,(Cyclic.ld)MarkRFMoveOut,PV(-1),11,(Cyclic.ld)WaitToChange,PV(-1),11,(Cyclic.ld)zzRTR000010011,PV(-1),77,(Cyclic.ld)zzRTR000010009,PV(-1),69,(Cyclic.ld)zz000300010006,PV(-1),8,(Cyclic.ld)zzRTR000010007,PV(-1),67,(Cyclic.ld)zzBOOL00010018,PV(-1),11,(Cyclic.ld)zzBOOL00010023,PV(-1),11,(Cyclic.ld)_GLOBAL_OFFSET_TABLE_,PCREL(0x10cb),0_GLOBAL_OFFSET_TABLE_,PCREL(0x103b),0_GLOBAL_OFFSET_TABLE_,PCREL(0x63),0|FILES|3|167|C:/Code/BandR Duct Line Project/Logical/MarkRF/Cyclic.ldC:/Code/BandR Duct Line Project/Logical/MarkRF/Init.ldC:/Code/BandR Duct Line Project/Logical/MarkRF/Exit.ld|LINE|202|2133|C:/Code/BandR Duct Line Project/Logical/MarkRF/Cyclic.ld|1|20|__AS__CyclicProgram1,103,03,114,04,122,08,158,010,159,012,176,013,195,014,205,016,217,018,228,019,236,022,284,024,285,026,302,027,310,030,349,032,350,034,367,035,386,042,447,044,464,045,483,047,500,048,519,051,551,052,559,055,605,057,606,059,623,060,642,062,660,063,668,066,789,068,790,070,807,071,826,078,887,080,898,081,906,083,923,084,942,086,961,088,974,089,993,091,1011,093,1012,095,1029,096,1048,098,1066,099,1074,0103,1098,0105,1099,0107,1116,0108,1135,0110,1153,0111,1161,0114,1201,0116,1202,0118,1219,0119,1238,0128,1325,0130,1342,0131,1361,0133,1378,0134,1397,0141,1461,0143,1478,0144,1486,0147,1607,0149,1608,0156,1668,0158,1685,0159,1704,0161,1722,0162,1730,0165,1864,0167,1865,0169,1876,0170,1884,0173,1923,0175,1924,0179,1954,0181,1971,0182,1979,0185,2018,0187,2019,0189,2036,0190,2055,0198,2133,0200,2144,0201,2152,0203,2172,0205,2185,0206,2204,0208,2222,0210,2223,0212,2234,0213,2242,0215,2259,0216,2278,0218,2295,0219,2314,0222,2347,0224,2360,0225,2379,0227,2397,0229,2398,0238,2486,0248,2591,0250,2602,0251,2610,0254,2649,0256,2650,0270,2789,0272,2800,0273,2808,0277,2843,0279,2844,0281,2855,0282,2863,0284,2881,0286,2894,0287,2913,0289,2931,0291,2932,0294,2964,0295,2972,0299,2992,0301,2993,0304,3023,0305,3031,0309,3052,0311,3053,0313,3070,0314,3089,0316,3107,0317,3115,0320,3149,0322,3150,0324,3167,0325,3186,0327,3204,0328,3212,0332,3247,0334,3248,0336,3265,0337,3284,0339,3302,0340,3310,0343,3346,0345,3347,0347,3364,0348,3383,0351,3416,0352,3424,0355,3460,0357,3461,0359,3478,0360,3497,0363,3530,0364,3538,0367,3574,0369,3575,0371,3592,0372,3611,0375,3644,0376,3652,0379,3688,0381,3689,0383,3700,0384,3708,0387,3748,0389,3749,0391,3766,0392,3785,0395,3816,0396,3824,0400,3860,0402,3861,0404,3872,0405,3880,0409,3905,0411,3906,0413,3917,0414,3925,0416,3943,0418,3956,0419,3975,0421,3993,0423,3994,0424,4003,0426,4019,0428,4030,0429,4038,0431,4056,0433,4069,0434,4088,0436,4106,0438,4107,0439,4116,0440,4132,0|TYPE|49|1466|C:/Code/BandR Duct Line Project/Logical/MarkRF/Cyclic.ld|0|int:t(0,1)=r(0,1);0020000000000;0017777777777;char:t(0,2)=r(0,2);0;127;long int:t(0,3)=r(0,1);0020000000000;0017777777777;unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;short int:t(0,8)=r(0,8);-32768;32767;short unsigned int:t(0,9)=r(0,9);0;65535;signed char:t(0,10)=r(0,10);-128;127;unsigned char:t(0,11)=r(0,11);0;255;float:t(0,12)=r(0,1);4;0;double:t(0,13)=r(0,1);8;0;long double:t(0,14)=r(0,1);12;0;complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;complex float:t(0,16)=r(0,16);4;0;complex double:t(0,17)=r(0,17);8;0;complex long double:t(0,18)=r(0,18);12;0;void:t(0,19)=(0,19)plcbit:t(0,20)=(0,11)plcbyte:t(0,21)=(0,11)plcword:t(0,22)=(0,9)plcdword:t(0,23)=(0,5)plctime:t(0,24)=(0,3)plctod:t(0,25)=(0,5)plcdate:t(0,26)=(0,5)plcdt:t(0,27)=(0,5)plcstring:t(0,28)=(0,2)plcwstring:t(0,29)=(0,9)BOOL:t(0,30)=(0,20)BYTE:t(0,31)=(0,21)WORD:t(0,32)=(0,22)DWORD:t(0,33)=(0,23)SINT:t(0,34)=(0,10)INT:t(0,35)=(0,8)DINT:t(0,36)=(0,3)USINT:t(0,37)=(0,11)UINT:t(0,38)=(0,9)UDINT:t(0,39)=(0,5)REAL:t(0,40)=(0,12)LREAL:t(0,41)=(0,13)TIME:t(0,42)=(0,24)TOD:t(0,43)=(0,25)TIME_OF_DAY:t(0,44)=(0,25)DATE:t(0,45)=(0,26)DT:t(0,46)=(0,27)DATE_AND_TIME:t(0,47)=(0,27)STRING:t(0,48)=(0,28)WSTRING:t(0,49)=(0,29)|FUNC|0|0|C:/Code/BandR Duct Line Project/Logical/MarkRF/Cyclic.ld|__AS__CyclicProgram||LINE|12|124|C:/Code/BandR Duct Line Project/Logical/MarkRF/Init.ld|1|18|__AS__InitProgram1,4167,03,4178,04,4186,08,4210,010,4211,012,4222,013,4230,017,4248,019,4249,020,4252,021,4264,0|TYPE|49|1466|C:/Code/BandR Duct Line Project/Logical/MarkRF/Init.ld|0|int:t(0,1)=r(0,1);0020000000000;0017777777777;char:t(0,2)=r(0,2);0;127;long int:t(0,3)=r(0,1);0020000000000;0017777777777;unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;short int:t(0,8)=r(0,8);-32768;32767;short unsigned int:t(0,9)=r(0,9);0;65535;signed char:t(0,10)=r(0,10);-128;127;unsigned char:t(0,11)=r(0,11);0;255;float:t(0,12)=r(0,1);4;0;double:t(0,13)=r(0,1);8;0;long double:t(0,14)=r(0,1);12;0;complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;complex float:t(0,16)=r(0,16);4;0;complex double:t(0,17)=r(0,17);8;0;complex long double:t(0,18)=r(0,18);12;0;void:t(0,19)=(0,19)plcbit:t(0,20)=(0,11)plcbyte:t(0,21)=(0,11)plcword:t(0,22)=(0,9)plcdword:t(0,23)=(0,5)plctime:t(0,24)=(0,3)plctod:t(0,25)=(0,5)plcdate:t(0,26)=(0,5)plcdt:t(0,27)=(0,5)plcstring:t(0,28)=(0,2)plcwstring:t(0,29)=(0,9)BOOL:t(0,30)=(0,20)BYTE:t(0,31)=(0,21)WORD:t(0,32)=(0,22)DWORD:t(0,33)=(0,23)SINT:t(0,34)=(0,10)INT:t(0,35)=(0,8)DINT:t(0,36)=(0,3)USINT:t(0,37)=(0,11)UINT:t(0,38)=(0,9)UDINT:t(0,39)=(0,5)REAL:t(0,40)=(0,12)LREAL:t(0,41)=(0,13)TIME:t(0,42)=(0,24)TOD:t(0,43)=(0,25)TIME_OF_DAY:t(0,44)=(0,25)DATE:t(0,45)=(0,26)DT:t(0,46)=(0,27)DATE_AND_TIME:t(0,47)=(0,27)STRING:t(0,48)=(0,28)WSTRING:t(0,49)=(0,29)|FUNC|0|0|C:/Code/BandR Duct Line Project/Logical/MarkRF/Init.ld|__AS__InitProgram||LINE|2|27|C:/Code/BandR Duct Line Project/Logical/MarkRF/Exit.ld|1|18|__AS__ExitProgram2,4303,0|TYPE|49|1466|C:/Code/BandR Duct Line Project/Logical/MarkRF/Exit.ld|0|int:t(0,1)=r(0,1);0020000000000;0017777777777;char:t(0,2)=r(0,2);0;127;long int:t(0,3)=r(0,1);0020000000000;0017777777777;unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;short int:t(0,8)=r(0,8);-32768;32767;short unsigned int:t(0,9)=r(0,9);0;65535;signed char:t(0,10)=r(0,10);-128;127;unsigned char:t(0,11)=r(0,11);0;255;float:t(0,12)=r(0,1);4;0;double:t(0,13)=r(0,1);8;0;long double:t(0,14)=r(0,1);12;0;complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;complex float:t(0,16)=r(0,16);4;0;complex double:t(0,17)=r(0,17);8;0;complex long double:t(0,18)=r(0,18);12;0;void:t(0,19)=(0,19)plcbit:t(0,20)=(0,11)plcbyte:t(0,21)=(0,11)plcword:t(0,22)=(0,9)plcdword:t(0,23)=(0,5)plctime:t(0,24)=(0,3)plctod:t(0,25)=(0,5)plcdate:t(0,26)=(0,5)plcdt:t(0,27)=(0,5)plcstring:t(0,28)=(0,2)plcwstring:t(0,29)=(0,9)BOOL:t(0,30)=(0,20)BYTE:t(0,31)=(0,21)WORD:t(0,32)=(0,22)DWORD:t(0,33)=(0,23)SINT:t(0,34)=(0,10)INT:t(0,35)=(0,8)DINT:t(0,36)=(0,3)USINT:t(0,37)=(0,11)UINT:t(0,38)=(0,9)UDINT:t(0,39)=(0,5)REAL:t(0,40)=(0,12)LREAL:t(0,41)=(0,13)TIME:t(0,42)=(0,24)TOD:t(0,43)=(0,25)TIME_OF_DAY:t(0,44)=(0,25)DATE:t(0,45)=(0,26)DT:t(0,46)=(0,27)DATE_AND_TIME:t(0,47)=(0,27)STRING:t(0,48)=(0,28)WSTRING:t(0,49)=(0,29)|FUNC|0|0|C:/Code/BandR Duct Line Project/Logical/MarkRF/Exit.ld|__AS__ExitProgram|