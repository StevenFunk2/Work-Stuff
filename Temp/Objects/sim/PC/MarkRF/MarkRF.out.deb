SECTIONS,12|INFO|7|104|GOT_COUNT,117GOT_DATA,3LOADERSTART,144EXIT_INIT,3195EXIT_CYCLIC,3162EXIT_EXIT,3235NO_DEBUG_INFO,0|GOT|117|4065|,CODE(0x0),0,CODE(0x0),0,CODE(0x0),0r_trig,AVT + Name(-1),0TON,AVT + Name(-1),0f_trig,AVT + Name(-1),0TP,AVT + Name(-1),0MarkActual,PV(-1),12,(Cyclic.ld)ScaledTarget,PV(-1),3,(Cyclic.ld)zzBOOL00010011,PV(-1),11,(Cyclic.ld)zz000300010003,PV(-1),8,(Cyclic.ld)StepBWorking,PV(-1),11,(Cyclic.ld)TON_0,PV(-1),50,(Cyclic.ld)SetStepB,PV(-1),11,(Cyclic.ld)Homed,PV(-1),11,(Cyclic.ld)zz000400010000,PV(-1),3,(Cyclic.ld)zzBOOL00010014,PV(-1),11,(Cyclic.ld)zzBOOL00010001,PV(-1),11,(Cyclic.ld)zzBOOL0001001F,PV(-1),11,(Cyclic.ld)MarkSetSignal,PV(-1),11,(Cyclic.ld)CheckPosition,PV(-1),11,(Cyclic.ld)zzBOOL0001000C,PV(-1),11,(Cyclic.ld)zzBOOL0001001D,PV(-1),11,(Cyclic.ld)zzBOOL0001001A,PV(-1),11,(Cyclic.ld)zzBOOL0001000E,PV(-1),11,(Cyclic.ld)MarkSlowBand,PV(-1),3,(Cyclic.ld)MarkEncoder,PV(-1),3,(Cyclic.ld)zzBOOL00010016,PV(-1),11,(Cyclic.ld)zzFTR000010001,PV(-1),55,(Cyclic.ld)MarkSetButton,PV(-1),11,(Cyclic.ld)zzBOOL0001000F,PV(-1),11,(Cyclic.ld)zzBOOL00010002,PV(-1),11,(Cyclic.ld)TP_0,PV(-1),51,(Cyclic.ld)zz000400010002,PV(-1),3,(Cyclic.ld)AbsDiff,PV(-1),3,(Cyclic.ld)zzRTR000010000,PV(-1),56,(Cyclic.ld)zzRTR000010002,PV(-1),58,(Cyclic.ld)MarkRFHighSpeed,PV(-1),11,(Cyclic.ld)zzBOOL00010017,PV(-1),11,(Cyclic.ld)BeginMarkHoming,PV(-1),11,(Cyclic.ld)MarkAuto,PV(-1),11,(Cyclic.ld)NotInSlowBand,PV(-1),11,(Cyclic.ld)MarkHeadJogInSwitch,PV(-1),11,(Cyclic.ld)MarkHeadJogOutSwitch,PV(-1),11,(Cyclic.ld)zzBOOL00010012,PV(-1),11,(Cyclic.ld)MarkHiSpeedSignal,PV(-1),11,(Cyclic.ld)TON_1,PV(-1),52,(Cyclic.ld)MarkButtonSignal,PV(-1),11,(Cyclic.ld)ScalerRef,PV(-1),12,(Cyclic.ld)zzBOOL00010020,PV(-1),11,(Cyclic.ld)zzBOOL00010004,PV(-1),11,(Cyclic.ld)InPosition,PV(-1),11,(Cyclic.ld)TargetOk,PV(-1),11,(Cyclic.ld)TargetTooSmall,PV(-1),11,(Cyclic.ld)zzBOOL00010008,PV(-1),11,(Cyclic.ld)zzFTR000010000,PV(-1),54,(Cyclic.ld)zzBOOL00010013,PV(-1),11,(Cyclic.ld)GoodToGo,PV(-1),11,(Cyclic.ld)zzBOOL0001001E,PV(-1),11,(Cyclic.ld)zzBOOL00010007,PV(-1),11,(Cyclic.ld)zzRTR000010005,PV(-1),61,(Cyclic.ld)zz000300010002,PV(-1),8,(Cyclic.ld)zz000300010000,PV(-1),8,(Cyclic.ld)zzBOOL0001000A,PV(-1),11,(Cyclic.ld)TON_2,PV(-1),53,(Cyclic.ld)ReturnTarget,PV(-1),3,(Cyclic.ld)zzBOOL0001000D,PV(-1),11,(Cyclic.ld)zz000800010000,PV(-1),12,(Cyclic.ld)zzRTR000010008,PV(-1),64,(Cyclic.ld)zz000300010005,PV(-1),8,(Cyclic.ld)TempStat,PV(-1),8,(Cyclic.ld)zzRTR000010006,PV(-1),62,(Cyclic.ld)zzRTR000010003,PV(-1),59,(Cyclic.ld)MarkMinLength,PV(-1),12,(Cyclic.ld)zzBOOL00010010,PV(-1),11,(Cyclic.ld)Scaler,PV(-1),12,(Cyclic.ld)MarkTarget,PV(-1),12,(Cyclic.ld)zz000300010004,PV(-1),8,(Cyclic.ld)MarkRFMoveIn,PV(-1),11,(Cyclic.ld)__AS__ImplInitInit,CODE(0xc82),19,(Init.ld)MarkReference,PV(-1),12,(Cyclic.ld)ResetMarkHoming,PV(-1),11,(Cyclic.ld)zz000400010001,PV(-1),3,(Cyclic.ld)MarkInPosBand,PV(-1),3,(Cyclic.ld)SetStepA,PV(-1),11,(Cyclic.ld)RefInProcess,PV(-1),11,(Cyclic.ld)ResetMarkSet,PV(-1),11,(Cyclic.ld)MarkRefSwitch,PV(-1),11,(Cyclic.ld)__AS__ImplInitDummyInit,CODE(0xc8c),19,(Init.ld)zzBOOL00010005,PV(-1),11,(Cyclic.ld)zzBOOL00010019,PV(-1),11,(Cyclic.ld)MarkDesired,PV(-1),12,(Cyclic.ld)zzBOOL00010000,PV(-1),11,(Cyclic.ld)MarkResolution,PV(-1),12,(Cyclic.ld)zzBOOL0001001B,PV(-1),11,(Cyclic.ld)zzBOOL0001000B,PV(-1),11,(Cyclic.ld)zzBOOL00010009,PV(-1),11,(Cyclic.ld)zz000400010004,PV(-1),3,(Cyclic.ld)MarkStatus,PV(-1),3,(Cyclic.ld)zzBOOL0001001C,PV(-1),11,(Cyclic.ld)zzBOOL00010003,PV(-1),11,(Cyclic.ld)zz000400010003,PV(-1),3,(Cyclic.ld)zzBOOL00010006,PV(-1),11,(Cyclic.ld)zzBOOL00010015,PV(-1),11,(Cyclic.ld)zzRTR000010001,PV(-1),57,(Cyclic.ld)zzRTR000010004,PV(-1),60,(Cyclic.ld)StepAComplete,PV(-1),11,(Cyclic.ld)zz000300010001,PV(-1),8,(Cyclic.ld)MarkRFMoveOut,PV(-1),11,(Cyclic.ld)WaitToChange,PV(-1),11,(Cyclic.ld)zzRTR000010009,PV(-1),65,(Cyclic.ld)zz000300010006,PV(-1),8,(Cyclic.ld)zzRTR000010007,PV(-1),63,(Cyclic.ld)zzBOOL00010018,PV(-1),11,(Cyclic.ld)_GLOBAL_OFFSET_TABLE_,PCREL(0xc9f),0_GLOBAL_OFFSET_TABLE_,PCREL(0xc6f),0_GLOBAL_OFFSET_TABLE_,PCREL(0x63),0|FILES|3|188|C:/code/BandR Projects/X20_CPU/X20_CPU/Logical/MarkRF/Cyclic.ldC:/code/BandR Projects/X20_CPU/X20_CPU/Logical/MarkRF/Init.ldC:/code/BandR Projects/X20_CPU/X20_CPU/Logical/MarkRF/Exit.ld|LINE|144|1499|C:/code/BandR Projects/X20_CPU/X20_CPU/Logical/MarkRF/Cyclic.ld|1|20|__AS__CyclicProgram1,103,03,120,04,139,05,149,07,161,09,172,010,180,013,228,015,229,017,246,018,254,021,293,023,294,025,311,026,330,033,391,035,408,036,427,038,444,039,463,042,495,043,503,046,549,048,550,050,567,051,586,053,604,054,612,057,733,059,734,061,751,062,770,069,831,071,848,072,867,074,885,075,893,078,933,080,934,082,951,083,970,085,987,086,1006,095,1094,097,1111,098,1119,0101,1240,0103,1241,0110,1301,0112,1318,0113,1337,0115,1355,0116,1363,0119,1497,0121,1498,0123,1515,0124,1523,0127,1562,0129,1563,0131,1580,0132,1588,0135,1627,0137,1628,0145,1705,0148,1732,0149,1740,0151,1758,0153,1771,0154,1790,0156,1808,0158,1809,0160,1826,0161,1845,0163,1862,0164,1881,0168,1921,0169,1929,0171,1947,0173,1960,0174,1979,0176,1997,0178,1998,0187,2086,0197,2191,0199,2202,0200,2210,0203,2249,0205,2250,0215,2342,0217,2353,0218,2361,0222,2381,0224,2382,0226,2399,0227,2407,0230,2441,0232,2442,0234,2459,0235,2467,0238,2503,0240,2504,0243,2536,0244,2544,0247,2580,0249,2581,0252,2613,0253,2621,0256,2657,0258,2658,0261,2690,0262,2698,0265,2734,0267,2735,0269,2752,0270,2760,0273,2800,0275,2801,0277,2818,0278,2826,0282,2862,0284,2863,0286,2874,0287,2882,0291,2907,0293,2908,0296,2933,0297,2941,0299,2959,0301,2972,0302,2991,0304,3009,0306,3010,0307,3019,0309,3035,0312,3060,0313,3068,0315,3086,0317,3099,0318,3118,0320,3136,0322,3137,0323,3146,0324,3162,0|TYPE|49|1466|C:/code/BandR Projects/X20_CPU/X20_CPU/Logical/MarkRF/Cyclic.ld|0|int:t(0,1)=r(0,1);0020000000000;0017777777777;char:t(0,2)=r(0,2);0;127;long int:t(0,3)=r(0,1);0020000000000;0017777777777;unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;short int:t(0,8)=r(0,8);-32768;32767;short unsigned int:t(0,9)=r(0,9);0;65535;signed char:t(0,10)=r(0,10);-128;127;unsigned char:t(0,11)=r(0,11);0;255;float:t(0,12)=r(0,1);4;0;double:t(0,13)=r(0,1);8;0;long double:t(0,14)=r(0,1);12;0;complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;complex float:t(0,16)=r(0,16);4;0;complex double:t(0,17)=r(0,17);8;0;complex long double:t(0,18)=r(0,18);12;0;void:t(0,19)=(0,19)plcbit:t(0,20)=(0,11)plcbyte:t(0,21)=(0,11)plcword:t(0,22)=(0,9)plcdword:t(0,23)=(0,5)plctime:t(0,24)=(0,3)plctod:t(0,25)=(0,5)plcdate:t(0,26)=(0,5)plcdt:t(0,27)=(0,5)plcstring:t(0,28)=(0,2)plcwstring:t(0,29)=(0,9)BOOL:t(0,30)=(0,20)BYTE:t(0,31)=(0,21)WORD:t(0,32)=(0,22)DWORD:t(0,33)=(0,23)SINT:t(0,34)=(0,10)INT:t(0,35)=(0,8)DINT:t(0,36)=(0,3)USINT:t(0,37)=(0,11)UINT:t(0,38)=(0,9)UDINT:t(0,39)=(0,5)REAL:t(0,40)=(0,12)LREAL:t(0,41)=(0,13)TIME:t(0,42)=(0,24)TOD:t(0,43)=(0,25)TIME_OF_DAY:t(0,44)=(0,25)DATE:t(0,45)=(0,26)DT:t(0,46)=(0,27)DATE_AND_TIME:t(0,47)=(0,27)STRING:t(0,48)=(0,28)WSTRING:t(0,49)=(0,29)|FUNC|0|0|C:/code/BandR Projects/X20_CPU/X20_CPU/Logical/MarkRF/Cyclic.ld|__AS__CyclicProgram||LINE|2|27|C:/code/BandR Projects/X20_CPU/X20_CPU/Logical/MarkRF/Init.ld|1|18|__AS__InitProgram2,3195,0|TYPE|49|1466|C:/code/BandR Projects/X20_CPU/X20_CPU/Logical/MarkRF/Init.ld|0|int:t(0,1)=r(0,1);0020000000000;0017777777777;char:t(0,2)=r(0,2);0;127;long int:t(0,3)=r(0,1);0020000000000;0017777777777;unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;short int:t(0,8)=r(0,8);-32768;32767;short unsigned int:t(0,9)=r(0,9);0;65535;signed char:t(0,10)=r(0,10);-128;127;unsigned char:t(0,11)=r(0,11);0;255;float:t(0,12)=r(0,1);4;0;double:t(0,13)=r(0,1);8;0;long double:t(0,14)=r(0,1);12;0;complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;complex float:t(0,16)=r(0,16);4;0;complex double:t(0,17)=r(0,17);8;0;complex long double:t(0,18)=r(0,18);12;0;void:t(0,19)=(0,19)plcbit:t(0,20)=(0,11)plcbyte:t(0,21)=(0,11)plcword:t(0,22)=(0,9)plcdword:t(0,23)=(0,5)plctime:t(0,24)=(0,3)plctod:t(0,25)=(0,5)plcdate:t(0,26)=(0,5)plcdt:t(0,27)=(0,5)plcstring:t(0,28)=(0,2)plcwstring:t(0,29)=(0,9)BOOL:t(0,30)=(0,20)BYTE:t(0,31)=(0,21)WORD:t(0,32)=(0,22)DWORD:t(0,33)=(0,23)SINT:t(0,34)=(0,10)INT:t(0,35)=(0,8)DINT:t(0,36)=(0,3)USINT:t(0,37)=(0,11)UINT:t(0,38)=(0,9)UDINT:t(0,39)=(0,5)REAL:t(0,40)=(0,12)LREAL:t(0,41)=(0,13)TIME:t(0,42)=(0,24)TOD:t(0,43)=(0,25)TIME_OF_DAY:t(0,44)=(0,25)DATE:t(0,45)=(0,26)DT:t(0,46)=(0,27)DATE_AND_TIME:t(0,47)=(0,27)STRING:t(0,48)=(0,28)WSTRING:t(0,49)=(0,29)|FUNC|0|0|C:/code/BandR Projects/X20_CPU/X20_CPU/Logical/MarkRF/Init.ld|__AS__InitProgram||LINE|2|27|C:/code/BandR Projects/X20_CPU/X20_CPU/Logical/MarkRF/Exit.ld|1|18|__AS__ExitProgram2,3235,0|TYPE|49|1466|C:/code/BandR Projects/X20_CPU/X20_CPU/Logical/MarkRF/Exit.ld|0|int:t(0,1)=r(0,1);0020000000000;0017777777777;char:t(0,2)=r(0,2);0;127;long int:t(0,3)=r(0,1);0020000000000;0017777777777;unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;short int:t(0,8)=r(0,8);-32768;32767;short unsigned int:t(0,9)=r(0,9);0;65535;signed char:t(0,10)=r(0,10);-128;127;unsigned char:t(0,11)=r(0,11);0;255;float:t(0,12)=r(0,1);4;0;double:t(0,13)=r(0,1);8;0;long double:t(0,14)=r(0,1);12;0;complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;complex float:t(0,16)=r(0,16);4;0;complex double:t(0,17)=r(0,17);8;0;complex long double:t(0,18)=r(0,18);12;0;void:t(0,19)=(0,19)plcbit:t(0,20)=(0,11)plcbyte:t(0,21)=(0,11)plcword:t(0,22)=(0,9)plcdword:t(0,23)=(0,5)plctime:t(0,24)=(0,3)plctod:t(0,25)=(0,5)plcdate:t(0,26)=(0,5)plcdt:t(0,27)=(0,5)plcstring:t(0,28)=(0,2)plcwstring:t(0,29)=(0,9)BOOL:t(0,30)=(0,20)BYTE:t(0,31)=(0,21)WORD:t(0,32)=(0,22)DWORD:t(0,33)=(0,23)SINT:t(0,34)=(0,10)INT:t(0,35)=(0,8)DINT:t(0,36)=(0,3)USINT:t(0,37)=(0,11)UINT:t(0,38)=(0,9)UDINT:t(0,39)=(0,5)REAL:t(0,40)=(0,12)LREAL:t(0,41)=(0,13)TIME:t(0,42)=(0,24)TOD:t(0,43)=(0,25)TIME_OF_DAY:t(0,44)=(0,25)DATE:t(0,45)=(0,26)DT:t(0,46)=(0,27)DATE_AND_TIME:t(0,47)=(0,27)STRING:t(0,48)=(0,28)WSTRING:t(0,49)=(0,29)|FUNC|0|0|C:/code/BandR Projects/X20_CPU/X20_CPU/Logical/MarkRF/Exit.ld|__AS__ExitProgram|